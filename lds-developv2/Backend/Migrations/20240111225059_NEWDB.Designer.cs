// <auto-generated />
using System;
using Friendly_.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Friendly_.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240111225059_NEWDB")]
    partial class NEWDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Friendly_.Models.MetodoPagamento", b =>
                {
                    b.Property<int>("metodoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("metodoID"));

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("metodoID");

                    b.ToTable("MetodoPagamento");
                });

            modelBuilder.Entity("Friendly_.Models.Pagamento", b =>
                {
                    b.Property<int>("pagamentoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("pagamentoID"));

                    b.Property<int>("metodoID")
                        .HasColumnType("int");

                    b.Property<double>("total")
                        .HasColumnType("float");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.HasKey("pagamentoID");

                    b.HasIndex("metodoID");

                    b.HasIndex("userID");

                    b.ToTable("Pagamento");
                });

            modelBuilder.Entity("Friendly_.Models.Rating", b =>
                {
                    b.Property<int>("ratingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ratingID"));

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.Property<int>("recintoID")
                        .HasColumnType("int");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ratingID");

                    b.HasIndex("recintoID");

                    b.HasIndex("userID");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Friendly_.Models.RecintoDesportivo", b =>
                {
                    b.Property<int>("recintoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("recintoID"));

                    b.Property<string>("concelho")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("contacto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imagem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("modalidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("preco")
                        .HasColumnType("real");

                    b.HasKey("recintoID");

                    b.ToTable("Recintos");
                });

            modelBuilder.Entity("Friendly_.Models.Reserva", b =>
                {
                    b.Property<int>("reservaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("reservaID"));

                    b.Property<string>("dataInicial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("horaCancelamento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("horaJogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("horaReserva")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("pagamentoID")
                        .HasColumnType("int");

                    b.Property<decimal>("preco")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("recintoID")
                        .HasColumnType("int");

                    b.Property<int?>("userContactID")
                        .HasColumnType("int");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.HasKey("reservaID");

                    b.HasIndex("pagamentoID");

                    b.HasIndex("recintoID");

                    b.HasIndex("userContactID");

                    b.HasIndex("userID");

                    b.ToTable("Reserva");
                });

            modelBuilder.Entity("Friendly_.Models.User", b =>
                {
                    b.Property<int>("userID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userID"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("genero")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool>("isAccountActivated")
                        .HasColumnType("bit");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("morada")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("nascimento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nif")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("pontos")
                        .HasColumnType("int");

                    b.Property<string>("telemovel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("userContactID")
                        .HasColumnType("int");

                    b.HasKey("userID");

                    b.HasIndex("userContactID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Friendly_.Models.UserContacts", b =>
                {
                    b.Property<int?>("userContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("userContactID"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userContactID");

                    b.ToTable("UserContacts");
                });

            modelBuilder.Entity("Friendly_.Models.Pagamento", b =>
                {
                    b.HasOne("Friendly_.Models.MetodoPagamento", "metodo")
                        .WithMany("Pagamentos")
                        .HasForeignKey("metodoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Friendly_.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("metodo");
                });

            modelBuilder.Entity("Friendly_.Models.Rating", b =>
                {
                    b.HasOne("Friendly_.Models.RecintoDesportivo", "recinto")
                        .WithMany()
                        .HasForeignKey("recintoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Friendly_.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("recinto");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Friendly_.Models.Reserva", b =>
                {
                    b.HasOne("Friendly_.Models.Pagamento", "pagamento")
                        .WithMany()
                        .HasForeignKey("pagamentoID");

                    b.HasOne("Friendly_.Models.RecintoDesportivo", "recinto")
                        .WithMany("Reservas")
                        .HasForeignKey("recintoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Friendly_.Models.UserContacts", "userContact")
                        .WithMany()
                        .HasForeignKey("userContactID");

                    b.HasOne("Friendly_.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pagamento");

                    b.Navigation("recinto");

                    b.Navigation("user");

                    b.Navigation("userContact");
                });

            modelBuilder.Entity("Friendly_.Models.User", b =>
                {
                    b.HasOne("Friendly_.Models.UserContacts", "userContact")
                        .WithMany("Users")
                        .HasForeignKey("userContactID");

                    b.Navigation("userContact");
                });

            modelBuilder.Entity("Friendly_.Models.MetodoPagamento", b =>
                {
                    b.Navigation("Pagamentos");
                });

            modelBuilder.Entity("Friendly_.Models.RecintoDesportivo", b =>
                {
                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("Friendly_.Models.UserContacts", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
